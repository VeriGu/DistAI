#lang ivy1.7

type node

relation requested(N1: node, N2:node)
relation replied(N1:node, N2:node)
relation holds(N:node)

after init {
    requested(N1, N2) := false;
    replied(N1, N2) := false;
    holds(N) := false;
}

action request(requester: node, responder: node) = {
    require ~requested(requester, responder);
    require requester ~= responder;
    requested(requester, responder) := true;
}

action reply(requester: node, responder: node) = {
    require ~replied(requester, responder);
    require ~holds(responder);
    require ~replied(responder, requester);
    require requested(requester, responder);
    require requester ~= responder;
    requested(requester, responder) := false;
    replied(requester, responder) := true;
}

action enter(requester: node) = {
    require N ~= requester -> replied(requester, N);
    holds(requester) := true;
}

action leave(requester: node) = {
    require holds(requester);
    holds(requester) := false;
    replied(requester, N) := false;
}

export request
export reply
export enter
export leave

# safety property
invariant [1000000] holds(N1) & holds(N2) -> N1 = N2
invariant [1000] ~replied(N1,N1)
invariant [1001] ~requested(N1,N1)
invariant [2000] N1 ~= N2 -> ~holds(N1) | ~holds(N2)
invariant [2001] N1 ~= N2 -> ~replied(N1,N2) | ~holds(N2)
invariant [2002] N1 ~= N2 -> replied(N1,N2) | ~holds(N1)
invariant [2003] N1 ~= N2 -> ~replied(N1,N2) | ~replied(N2,N1)
