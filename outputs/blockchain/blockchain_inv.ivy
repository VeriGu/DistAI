#lang ivy1.7

module total_order(r) = {
    axiom r(X,X)                        # Reflexivity
    axiom r(X, Y) & r(Y, Z) -> r(X, Z)  # Transitivity
    axiom r(X, Y) & r(Y, X) -> X = Y    # Anti-symmetry
    axiom r(X, Y) | r(Y, X)             # Totality
}

type node
type block
type transaction
type time

relation le(T1:time, T2:time)
instantiate total_order(le)

relation leader(N:node, T:time)
axiom leader(N1,T) & leader(N2,T) -> N1 = N2
axiom leader(N,T1) & leader(N,T2) -> T1 = T2

relation honest(N:node)
relation broadcastable(N:node, B:block, T:time)
relation broadcasted(N:node)

relation block_found(N:node, B:block, T:time)
relation block_confirmed(N:node, B:block, T:time)

relation transaction_time(TR:transaction, T:time)
axiom transaction_time(TR, T1) & transaction_time(TR, T2) -> T1 = T2

relation transaction_in_block(TR:transaction, B:block)
relation transaction_confirmed(TR:transaction, N:node)

after init {
    block_found(N,B,T) := false;
    block_confirmed(N,B,T) := false;
    transaction_in_block(TR,B) := false;
    transaction_confirmed(TR,N) := false;
    broadcasted(N) := false;
    broadcastable(N,B,T) := false;
}

action find_block(n:node, b:block, t:time) = {
    require leader(n,t);
    block_found(n,b,t) := true;
}

action add_transaction(tr:transaction, b:block) = {
    transaction_in_block(tr,b) := true;
}

action begin_broadcast(n:node, b:block, t:time) = {
    require leader(n,t) & block_found(n,b,t) & ~broadcasted(n);
    broadcastable(n,b,t) := true;
}

action begin_broadcast_adversary(n:node, b:block, t:time) = {
    require ~honest(n);
    broadcastable(n,b,t) := true;
}

action byzantine_broadcast(n:node, b:block, t:time) = {
    require broadcastable(n,b,t);
    require honest(n) & transaction_time(TR,T) & le(T,t) & ~transaction_confirmed(TR,n) -> transaction_in_block(TR,b);
    require honest(n) & transaction_in_block(TR,b) -> transaction_time(TR,T) & le(T,t) & ~transaction_confirmed(TR,n);
    block_confirmed(N,B,t) := *;
    broadcasted(n) := true;
    broadcastable(n,b,t) := false;
    assume honest(N) -> ~(B1 ~= B2 & block_confirmed(N,B1,t) & block_confirmed(N,B2,t));
    assume honest(N1) & honest(N2) -> (block_confirmed(N1,b,t) & block_confirmed(N2,b,t)) | (~block_confirmed(N1,B,t) & ~block_confirmed(N2,B,t));
    assume honest(n) & honest(N) -> block_confirmed(N,b,t);
    transaction_confirmed(TR,N) := transaction_confirmed(TR,N) | (transaction_in_block(TR,b)) if honest(n) else transaction_confirmed(TR,N);
}

action sabotage(n:node) = {
    require ~honest(n);
    block_confirmed(n,B,T) := *;
    transaction_confirmed(TR,n) := *;
}

export find_block
export begin_broadcast
export begin_broadcast_adversary
export byzantine_broadcast
export add_transaction
export sabotage

# safety property
invariant [1000000] (honest(N1) & honest(N2) -> (block_confirmed(N1,B,T) & block_confirmed(N2,B,T)) | (~block_confirmed(N1,B,T) & ~block_confirmed(N2,B,T)))
    & (honest(N1) & honest(N2) -> (transaction_confirmed(TR,N1) & transaction_confirmed(TR,N2)) | (~transaction_confirmed(TR,N1) & ~transaction_confirmed(TR,N2)))
    & (honest(N) & leader(N,T2) & transaction_time(TR,T1) & le(T1,T2) & broadcasted(N) & honest(N1) -> transaction_confirmed(TR,N1))
invariant [1000] block_found(N1,B1,TI1) | ~honest(N1) | ~broadcastable(N1,B1,TI1)
invariant [1001] leader(N1,TI1) | ~honest(N1) | ~broadcastable(N1,B1,TI1)
invariant [1002] leader(N1,TI1) | ~block_found(N1,B1,TI1)
invariant [3000] le(TI1, TI2) & TI1 ~= TI2 -> ~honest(N1) | ~broadcastable(N1,B1,TI2) | ~block_found(N1,B1,TI1)
invariant [3001] le(TI1, TI2) & TI1 ~= TI2 -> ~honest(N1) | ~broadcastable(N1,B1,TI1) | ~block_found(N1,B1,TI2)
invariant [3002] le(TI1, TI2) & TI1 ~= TI2 -> ~honest(N1) | ~broadcastable(N1,B1,TI1) | ~broadcastable(N1,B1,TI2)
invariant [3003] le(TI1, TI2) & TI1 ~= TI2 -> ~leader(N1,TI2) | ~honest(N1) | ~broadcastable(N1,B1,TI1)
invariant [3004] le(TI1, TI2) & TI1 ~= TI2 -> ~leader(N1,TI1) | ~block_found(N1,B1,TI2)
invariant [3005] le(TI1, TI2) & TI1 ~= TI2 -> ~leader(N1,TI2) | ~block_found(N1,B1,TI1)
invariant [3006] le(TI1, TI2) & TI1 ~= TI2 -> ~block_found(N1,B1,TI1) | ~block_found(N1,B1,TI2)
invariant [3007] le(TI1, TI2) & TI1 ~= TI2 -> ~leader(N1,TI1) | ~honest(N1) | ~broadcastable(N1,B1,TI2)
invariant [3008] le(TI1, TI2) & TI1 ~= TI2 -> ~leader(N1,TI1) | ~leader(N1,TI2)
invariant [3009] le(TI1, TI2) & TI1 ~= TI2 -> ~transaction_time(TR1,TI1) | ~transaction_time(TR1,TI2)
